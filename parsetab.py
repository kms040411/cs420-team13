
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLESSGREATERleftPLUSMINUSleftMULTIPLYDIVIDECOMMA DIVIDE DOUBLEPLUS ELSE EQ FLOAT FLOAT_VAL FOR GREATER ID IF INT INT_VAL LBRACE LESS LPAREN MINUS MULTIPLY PLUS PRINTF PTR_AMP RBRACE RETURN RPAREN SEMI SQ_LBRACKET SQ_RBRACKET STRING VOID WHILEprogram : function program\n\t\t\t   | functionfunction : type id variable_declaration block\n\t\t\t\t| VOID id variable_declaration blocktype : INT\n\t\t\t| FLOATid : IDvariable_declaration : LPAREN declarations RPARENdeclarations : type id_ptr_or_array COMMA declarations\n\t\t\t\t\t| type id_ptr_or_array\n\t\t\t\t\t| VOIDid_ptr_or_array : id\n\t\t\t\t\t   | id array_decs\n\t\t\t\t\t   | ptrs idarray_decs : SQ_LBRACKET expression SQ_RBRACKET array_decs\n\t\t\t\t  | SQ_LBRACKET expression SQ_RBRACKETptrs : MULTIPLY ptrs\n\t\t    | MULTIPLYblock : LBRACE statements RBRACEstatements : semi_statement\n\t\t\t\t  | non_semi_statement\n\t\t\t      | semi_statement SEMI statements\n\t\t\t      | non_semi_statement statements\n\t\t\t      | emptysemi_statement : var_declaration\n\t\t\t\t\t  | var_assignment\n\t\t\t\t\t  | function_app\n\t\t\t\t\t  | expression\n\t\t\t\t\t  | return_exprnon_semi_statement : conditional\n\t\t\t\t\t\t  | for\n\t\t\t\t\t\t  | whileconditional : if elif_elseif : IF LPAREN expression RPAREN blockelif_else : ELSE IF LPAREN expression RPAREN block elif_else\n\t\t\t\t | ELSE block\n\t\t\t\t | emptyfor : FOR LPAREN loop_init_or_empty SEMI semi_statement_or_empty SEMI semi_statement_or_empty RPAREN blockloop_init_or_empty : loop_init\n\t\t\t\t\t\t  | expression\n\t\t\t\t\t\t  | emptysemi_statement_or_empty : semi_statement\n\t\t\t\t\t\t       | emptyloop_init : type var_assignment\n\t\t\t\t | semi_statementwhile : WHILE LPAREN expression RPAREN blockvar_declaration : type var_and_assignvar_assignment : id_ptr_or_array EQ expression\n\t\t\t\t\t  | id_ptr_or_array EQ function_appvar_and_assign : var_assignment COMMA var_and_assign\n\t\t\t\t\t  | var_assignment\n\t\t\t\t\t  | id_ptr_or_array COMMA var_and_assign\n\t\t\t\t\t  | id_ptr_or_arrayreturn_expr : RETURN expression\n\t\t\t\t   | RETURNfunction_app : PRINTF LPAREN STRING print_formats RPAREN\n\t\t\t\t\t| ID LPAREN arguments RPARENprint_formats : COMMA expression print_formats\n\t\t\t\t\t | emptyarguments : expression COMMA arguments\n\t\t\t\t | expression\n\t\t\t\t | emptyempty :expression : expression PLUS expression\n\t\t\t\t  | expression MINUS expression\n\t\t\t \t  | expression MULTIPLY expression\n\t\t\t  \t  | expression DIVIDE expression\n\t\t\t  \t  | expression LESS expression\n\t\t\t  \t  | expression GREATER expression\n\t\t  \t\t  | LPAREN expression RPAREN\n\t\t  \t\t  | MINUS expression\n\t\t  \t\t  | PTR_AMP expression\n\t\t  \t\t  | id_ptr_or_array DOUBLEPLUS\n\t\t  \t\t  | DOUBLEPLUS id_ptr_or_array\n\t\t  \t\t  | id_ptr_or_array\n\t\t  \t\t  | function_app\n\t\t  \t\t  | var_assignment\n\t\t\t  \t  | INT_VAL\n\t\t\t  \t  | FLOAT_VAL'
    
_lr_action_items = {'VOID':([0,2,12,14,19,52,86,],[4,4,18,-3,-4,-19,18,]),'INT':([0,2,12,14,15,19,22,29,30,31,44,52,53,77,79,80,86,104,125,138,140,143,144,146,148,],[5,5,5,-3,5,-4,5,-30,-31,-32,-63,-19,5,-33,-37,5,5,-36,5,-46,-34,5,-63,-35,-38,]),'FLOAT':([0,2,12,14,15,19,22,29,30,31,44,52,53,77,79,80,86,104,125,138,140,143,144,146,148,],[6,6,6,-3,6,-4,6,-30,-31,-32,-63,-19,6,-33,-37,6,6,-36,6,-46,-34,6,-63,-35,-38,]),'$end':([1,2,7,14,19,52,],[0,-2,-1,-3,-4,-19,]),'ID':([3,4,5,6,15,17,22,29,30,31,32,35,37,38,39,40,43,44,48,52,53,55,56,57,58,59,60,64,71,73,77,79,80,81,83,85,94,95,104,109,120,123,124,125,138,140,143,144,146,148,],[9,9,-5,-6,36,9,36,-30,-31,-32,9,36,36,-18,36,9,36,-63,9,-19,36,36,36,36,36,36,36,36,36,-17,-33,-37,36,36,36,36,9,9,-36,9,36,36,36,36,-46,-34,36,-63,-35,-38,]),'MULTIPLY':([5,6,9,15,17,22,25,26,27,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,47,52,53,55,56,57,58,59,60,64,65,67,68,69,70,71,72,74,75,76,77,79,80,81,82,83,84,85,88,89,90,91,92,93,94,95,96,97,99,101,104,107,109,110,112,113,114,115,120,122,123,124,125,129,131,132,134,138,139,140,143,144,146,148,],[-5,-6,-7,38,38,38,-77,-76,57,-30,-31,-32,38,-75,38,-7,38,38,38,38,-78,-79,38,-63,-12,-19,38,38,38,38,38,38,38,38,-73,57,-75,-76,-77,38,57,57,-74,57,-33,-37,38,38,-13,38,-14,38,57,57,-66,-67,57,57,38,38,57,-49,-70,57,-36,57,38,-77,-76,57,57,57,38,-57,38,38,38,-16,-56,57,57,-46,-15,-34,38,-63,-35,-38,]),'LPAREN':([8,9,10,15,22,29,30,31,34,35,36,37,39,43,44,45,46,49,52,53,55,56,57,58,59,60,64,71,77,79,80,81,83,85,103,104,120,123,124,125,138,140,143,144,146,148,],[12,-7,12,35,35,-30,-31,-32,66,35,71,35,35,35,-63,80,81,85,-19,35,35,35,35,35,35,35,35,35,-33,-37,35,35,35,35,124,-36,35,35,35,35,-46,-34,35,-63,-35,-38,]),'SQ_LBRACKET':([9,36,47,129,],[-7,-7,83,83,]),'COMMA':([9,36,41,42,47,51,62,63,65,68,69,70,72,74,75,82,84,88,89,90,91,92,93,96,97,98,99,101,122,126,127,129,131,132,139,],[-7,-7,-78,-79,-12,86,94,95,-73,-75,-76,-77,-71,-72,-74,-13,-14,-64,-65,-66,-67,-68,-69,-48,-49,120,-70,123,-57,94,95,-16,-56,120,-15,]),'RPAREN':([9,16,18,24,25,26,27,28,33,36,41,42,43,47,51,61,62,63,65,67,68,69,70,71,72,74,75,76,82,84,88,89,90,91,92,93,96,97,98,99,100,101,102,113,115,116,117,118,119,121,122,123,129,131,132,133,134,136,137,139,141,143,145,],[-7,50,-11,-25,-26,-27,-28,-29,-75,-7,-78,-79,-55,-12,-10,-47,-51,-53,-73,99,-75,-76,-77,-63,-71,-72,-74,-54,-13,-14,-64,-65,-66,-67,-68,-69,-48,-49,-63,-70,122,-61,-62,128,130,-9,-50,-52,131,-59,-57,-63,-16,-56,-63,-60,142,-42,-43,-15,-58,-63,147,]),'EQ':([9,33,36,47,63,68,82,84,127,129,139,],[-7,64,-7,-12,64,64,-13,-14,64,-16,-15,]),'SEMI':([9,21,24,25,26,27,28,33,36,41,42,43,47,61,62,63,65,68,69,70,72,74,75,76,80,82,84,88,89,90,91,92,93,96,97,99,105,106,107,108,110,111,112,117,118,122,125,126,127,129,131,135,136,137,139,],[-7,53,-25,-26,-27,-28,-29,-75,-7,-78,-79,-55,-12,-47,-51,-53,-73,-75,-76,-77,-71,-72,-74,-54,-63,-13,-14,-64,-65,-66,-67,-68,-69,-48,-49,-70,125,-39,-28,-41,-26,-45,-27,-50,-52,-57,-63,-44,-53,-16,-56,143,-42,-43,-15,]),'RBRACE':([9,15,20,21,22,23,24,25,26,27,28,29,30,31,33,36,41,42,43,44,47,52,53,54,61,62,63,65,68,69,70,72,74,75,76,77,79,82,84,87,88,89,90,91,92,93,96,97,99,104,117,118,122,129,131,138,139,140,144,146,148,],[-7,-63,52,-20,-21,-24,-25,-26,-27,-28,-29,-30,-31,-32,-75,-7,-78,-79,-55,-63,-12,-19,-63,-23,-47,-51,-53,-73,-75,-76,-77,-71,-72,-74,-54,-33,-37,-13,-14,-22,-64,-65,-66,-67,-68,-69,-48,-49,-70,-36,-50,-52,-57,-16,-56,-46,-15,-34,-63,-35,-38,]),'PLUS':([9,25,26,27,33,36,41,42,47,65,67,68,69,70,72,74,75,76,82,84,88,89,90,91,92,93,96,97,99,101,107,110,112,113,114,115,122,129,131,132,134,139,],[-7,-77,-76,55,-75,-7,-78,-79,-12,-73,55,-75,-76,-77,-71,55,-74,55,-13,-14,-64,-65,-66,-67,55,55,55,-49,-70,55,55,-77,-76,55,55,55,-57,-16,-56,55,55,-15,]),'MINUS':([9,15,22,25,26,27,29,30,31,33,35,36,37,39,41,42,43,44,47,52,53,55,56,57,58,59,60,64,65,67,68,69,70,71,72,74,75,76,77,79,80,81,82,83,84,85,88,89,90,91,92,93,96,97,99,101,104,107,110,112,113,114,115,120,122,123,124,125,129,131,132,134,138,139,140,143,144,146,148,],[-7,37,37,-77,-76,56,-30,-31,-32,-75,37,-7,37,37,-78,-79,37,-63,-12,-19,37,37,37,37,37,37,37,37,-73,56,-75,-76,-77,37,-71,56,-74,56,-33,-37,37,37,-13,37,-14,37,-64,-65,-66,-67,56,56,56,-49,-70,56,-36,56,-77,-76,56,56,56,37,-57,37,37,37,-16,-56,56,56,-46,-15,-34,37,-63,-35,-38,]),'DIVIDE':([9,25,26,27,33,36,41,42,47,65,67,68,69,70,72,74,75,76,82,84,88,89,90,91,92,93,96,97,99,101,107,110,112,113,114,115,122,129,131,132,134,139,],[-7,-77,-76,58,-75,-7,-78,-79,-12,-73,58,-75,-76,-77,58,58,-74,58,-13,-14,58,58,-66,-67,58,58,58,-49,-70,58,58,-77,-76,58,58,58,-57,-16,-56,58,58,-15,]),'LESS':([9,25,26,27,33,36,41,42,47,65,67,68,69,70,72,74,75,76,82,84,88,89,90,91,92,93,96,97,99,101,107,110,112,113,114,115,122,129,131,132,134,139,],[-7,-77,-76,59,-75,-7,-78,-79,-12,-73,59,-75,-76,-77,-71,59,-74,59,-13,-14,-64,-65,-66,-67,-68,-69,59,-49,-70,59,59,-77,-76,59,59,59,-57,-16,-56,59,59,-15,]),'GREATER':([9,25,26,27,33,36,41,42,47,65,67,68,69,70,72,74,75,76,82,84,88,89,90,91,92,93,96,97,99,101,107,110,112,113,114,115,122,129,131,132,134,139,],[-7,-77,-76,60,-75,-7,-78,-79,-12,-73,60,-75,-76,-77,-71,60,-74,60,-13,-14,-64,-65,-66,-67,-68,-69,60,-49,-70,60,60,-77,-76,60,60,60,-57,-16,-56,60,60,-15,]),'SQ_RBRACKET':([9,36,41,42,47,65,68,69,70,72,74,75,82,84,88,89,90,91,92,93,96,97,99,114,122,129,131,139,],[-7,-7,-78,-79,-12,-73,-75,-76,-77,-71,-72,-74,-13,-14,-64,-65,-66,-67,-68,-69,-48,-49,-70,129,-57,-16,-56,-15,]),'DOUBLEPLUS':([9,15,22,29,30,31,33,35,36,37,39,43,44,47,52,53,55,56,57,58,59,60,64,68,71,77,79,80,81,82,83,84,85,104,120,123,124,125,129,138,139,140,143,144,146,148,],[-7,40,40,-30,-31,-32,65,40,-7,40,40,40,-63,-12,-19,40,40,40,40,40,40,40,40,65,40,-33,-37,40,40,-13,40,-14,40,-36,40,40,40,40,-16,-46,-15,-34,40,-63,-35,-38,]),'LBRACE':([11,13,50,78,128,130,142,147,],[15,15,-8,15,15,15,15,15,]),'PRINTF':([15,22,29,30,31,35,37,39,43,44,52,53,55,56,57,58,59,60,64,71,77,79,80,81,83,85,104,120,123,124,125,138,140,143,144,146,148,],[34,34,-30,-31,-32,34,34,34,34,-63,-19,34,34,34,34,34,34,34,34,34,-33,-37,34,34,34,34,-36,34,34,34,34,-46,-34,34,-63,-35,-38,]),'PTR_AMP':([15,22,29,30,31,35,37,39,43,44,52,53,55,56,57,58,59,60,64,71,77,79,80,81,83,85,104,120,123,124,125,138,140,143,144,146,148,],[39,39,-30,-31,-32,39,39,39,39,-63,-19,39,39,39,39,39,39,39,39,39,-33,-37,39,39,39,39,-36,39,39,39,39,-46,-34,39,-63,-35,-38,]),'INT_VAL':([15,22,29,30,31,35,37,39,43,44,52,53,55,56,57,58,59,60,64,71,77,79,80,81,83,85,104,120,123,124,125,138,140,143,144,146,148,],[41,41,-30,-31,-32,41,41,41,41,-63,-19,41,41,41,41,41,41,41,41,41,-33,-37,41,41,41,41,-36,41,41,41,41,-46,-34,41,-63,-35,-38,]),'FLOAT_VAL':([15,22,29,30,31,35,37,39,43,44,52,53,55,56,57,58,59,60,64,71,77,79,80,81,83,85,104,120,123,124,125,138,140,143,144,146,148,],[42,42,-30,-31,-32,42,42,42,42,-63,-19,42,42,42,42,42,42,42,42,42,-33,-37,42,42,42,42,-36,42,42,42,42,-46,-34,42,-63,-35,-38,]),'RETURN':([15,22,29,30,31,44,52,53,77,79,80,104,125,138,140,143,144,146,148,],[43,43,-30,-31,-32,-63,-19,43,-33,-37,43,-36,43,-46,-34,43,-63,-35,-38,]),'FOR':([15,22,29,30,31,44,52,53,77,79,104,138,140,144,146,148,],[45,45,-30,-31,-32,-63,-19,45,-33,-37,-36,-46,-34,-63,-35,-38,]),'WHILE':([15,22,29,30,31,44,52,53,77,79,104,138,140,144,146,148,],[46,46,-30,-31,-32,-63,-19,46,-33,-37,-36,-46,-34,-63,-35,-38,]),'IF':([15,22,29,30,31,44,52,53,77,78,79,104,138,140,144,146,148,],[49,49,-30,-31,-32,-63,-19,49,-33,103,-37,-36,-46,-34,-63,-35,-38,]),'ELSE':([44,52,140,144,],[78,-19,-34,78,]),'STRING':([66,],[98,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,7,]),'function':([0,2,],[2,2,]),'type':([0,2,12,15,22,53,80,86,125,143,],[3,3,17,32,32,32,109,17,32,32,]),'id':([3,4,15,17,22,32,35,37,39,40,43,48,53,55,56,57,58,59,60,64,71,80,81,83,85,94,95,109,120,123,124,125,143,],[8,10,47,47,47,47,47,47,47,47,47,84,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'variable_declaration':([8,10,],[11,13,]),'block':([11,13,78,128,130,142,147,],[14,19,104,138,140,144,148,]),'declarations':([12,86,],[16,116,]),'statements':([15,22,53,],[20,54,87,]),'semi_statement':([15,22,53,80,125,143,],[21,21,21,111,136,136,]),'non_semi_statement':([15,22,53,],[22,22,22,]),'empty':([15,22,44,53,71,80,98,123,125,132,143,144,],[23,23,79,23,102,108,121,102,137,121,137,79,]),'var_declaration':([15,22,53,80,125,143,],[24,24,24,24,24,24,]),'var_assignment':([15,22,32,35,37,39,43,53,55,56,57,58,59,60,64,71,80,81,83,85,94,95,109,120,123,124,125,143,],[25,25,62,70,70,70,70,25,70,70,70,70,70,70,70,70,110,70,70,70,62,62,126,70,70,70,25,25,]),'function_app':([15,22,35,37,39,43,53,55,56,57,58,59,60,64,71,80,81,83,85,120,123,124,125,143,],[26,26,69,69,69,69,26,69,69,69,69,69,69,97,69,112,69,69,69,69,69,69,26,26,]),'expression':([15,22,35,37,39,43,53,55,56,57,58,59,60,64,71,80,81,83,85,120,123,124,125,143,],[27,27,67,72,74,76,27,88,89,90,91,92,93,96,101,107,113,114,115,132,101,134,27,27,]),'return_expr':([15,22,53,80,125,143,],[28,28,28,28,28,28,]),'conditional':([15,22,53,],[29,29,29,]),'for':([15,22,53,],[30,30,30,]),'while':([15,22,53,],[31,31,31,]),'id_ptr_or_array':([15,17,22,32,35,37,39,40,43,53,55,56,57,58,59,60,64,71,80,81,83,85,94,95,109,120,123,124,125,143,],[33,51,33,63,68,68,68,75,68,33,68,68,68,68,68,68,68,68,68,68,68,68,63,63,127,68,68,68,33,33,]),'if':([15,22,53,],[44,44,44,]),'ptrs':([15,17,22,32,35,37,38,39,40,43,53,55,56,57,58,59,60,64,71,80,81,83,85,94,95,109,120,123,124,125,143,],[48,48,48,48,48,48,73,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'var_and_assign':([32,94,95,109,],[61,117,118,61,]),'elif_else':([44,144,],[77,146,]),'array_decs':([47,129,],[82,139,]),'arguments':([71,123,],[100,133,]),'loop_init_or_empty':([80,],[105,]),'loop_init':([80,],[106,]),'print_formats':([98,132,],[119,141,]),'semi_statement_or_empty':([125,143,],[135,145,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function program','program',2,'p_program','lex_yacc.py',237),
  ('program -> function','program',1,'p_program','lex_yacc.py',238),
  ('function -> type id variable_declaration block','function',4,'p_function','lex_yacc.py',251),
  ('function -> VOID id variable_declaration block','function',4,'p_function','lex_yacc.py',252),
  ('type -> INT','type',1,'p_type','lex_yacc.py',265),
  ('type -> FLOAT','type',1,'p_type','lex_yacc.py',266),
  ('id -> ID','id',1,'p_id','lex_yacc.py',276),
  ('variable_declaration -> LPAREN declarations RPAREN','variable_declaration',3,'p_varaible_declaration','lex_yacc.py',286),
  ('declarations -> type id_ptr_or_array COMMA declarations','declarations',4,'p_declarations','lex_yacc.py',296),
  ('declarations -> type id_ptr_or_array','declarations',2,'p_declarations','lex_yacc.py',297),
  ('declarations -> VOID','declarations',1,'p_declarations','lex_yacc.py',298),
  ('id_ptr_or_array -> id','id_ptr_or_array',1,'p_id_ptr_or_array','lex_yacc.py',323),
  ('id_ptr_or_array -> id array_decs','id_ptr_or_array',2,'p_id_ptr_or_array','lex_yacc.py',324),
  ('id_ptr_or_array -> ptrs id','id_ptr_or_array',2,'p_id_ptr_or_array','lex_yacc.py',325),
  ('array_decs -> SQ_LBRACKET expression SQ_RBRACKET array_decs','array_decs',4,'p_array_decs','lex_yacc.py',338),
  ('array_decs -> SQ_LBRACKET expression SQ_RBRACKET','array_decs',3,'p_array_decs','lex_yacc.py',339),
  ('ptrs -> MULTIPLY ptrs','ptrs',2,'p_ptrs','lex_yacc.py',349),
  ('ptrs -> MULTIPLY','ptrs',1,'p_ptrs','lex_yacc.py',350),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','lex_yacc.py',360),
  ('statements -> semi_statement','statements',1,'p_statements','lex_yacc.py',370),
  ('statements -> non_semi_statement','statements',1,'p_statements','lex_yacc.py',371),
  ('statements -> semi_statement SEMI statements','statements',3,'p_statements','lex_yacc.py',372),
  ('statements -> non_semi_statement statements','statements',2,'p_statements','lex_yacc.py',373),
  ('statements -> empty','statements',1,'p_statements','lex_yacc.py',374),
  ('semi_statement -> var_declaration','semi_statement',1,'p_semi_statement','lex_yacc.py',398),
  ('semi_statement -> var_assignment','semi_statement',1,'p_semi_statement','lex_yacc.py',399),
  ('semi_statement -> function_app','semi_statement',1,'p_semi_statement','lex_yacc.py',400),
  ('semi_statement -> expression','semi_statement',1,'p_semi_statement','lex_yacc.py',401),
  ('semi_statement -> return_expr','semi_statement',1,'p_semi_statement','lex_yacc.py',402),
  ('non_semi_statement -> conditional','non_semi_statement',1,'p_non_semi_statement','lex_yacc.py',412),
  ('non_semi_statement -> for','non_semi_statement',1,'p_non_semi_statement','lex_yacc.py',413),
  ('non_semi_statement -> while','non_semi_statement',1,'p_non_semi_statement','lex_yacc.py',414),
  ('conditional -> if elif_else','conditional',2,'p_conditional','lex_yacc.py',425),
  ('if -> IF LPAREN expression RPAREN block','if',5,'p_if','lex_yacc.py',437),
  ('elif_else -> ELSE IF LPAREN expression RPAREN block elif_else','elif_else',7,'p_elif_else','lex_yacc.py',446),
  ('elif_else -> ELSE block','elif_else',2,'p_elif_else','lex_yacc.py',447),
  ('elif_else -> empty','elif_else',1,'p_elif_else','lex_yacc.py',448),
  ('for -> FOR LPAREN loop_init_or_empty SEMI semi_statement_or_empty SEMI semi_statement_or_empty RPAREN block','for',9,'p_for','lex_yacc.py',466),
  ('loop_init_or_empty -> loop_init','loop_init_or_empty',1,'p_loop_init_or_empty','lex_yacc.py',476),
  ('loop_init_or_empty -> expression','loop_init_or_empty',1,'p_loop_init_or_empty','lex_yacc.py',477),
  ('loop_init_or_empty -> empty','loop_init_or_empty',1,'p_loop_init_or_empty','lex_yacc.py',478),
  ('semi_statement_or_empty -> semi_statement','semi_statement_or_empty',1,'p_semi_statement_or_empty','lex_yacc.py',488),
  ('semi_statement_or_empty -> empty','semi_statement_or_empty',1,'p_semi_statement_or_empty','lex_yacc.py',489),
  ('loop_init -> type var_assignment','loop_init',2,'p_loop_init','lex_yacc.py',499),
  ('loop_init -> semi_statement','loop_init',1,'p_loop_init','lex_yacc.py',500),
  ('while -> WHILE LPAREN expression RPAREN block','while',5,'p_while','lex_yacc.py',513),
  ('var_declaration -> type var_and_assign','var_declaration',2,'p_var_declaration','lex_yacc.py',523),
  ('var_assignment -> id_ptr_or_array EQ expression','var_assignment',3,'p_var_assignment','lex_yacc.py',563),
  ('var_assignment -> id_ptr_or_array EQ function_app','var_assignment',3,'p_var_assignment','lex_yacc.py',564),
  ('var_and_assign -> var_assignment COMMA var_and_assign','var_and_assign',3,'p_var_and_assign','lex_yacc.py',574),
  ('var_and_assign -> var_assignment','var_and_assign',1,'p_var_and_assign','lex_yacc.py',575),
  ('var_and_assign -> id_ptr_or_array COMMA var_and_assign','var_and_assign',3,'p_var_and_assign','lex_yacc.py',576),
  ('var_and_assign -> id_ptr_or_array','var_and_assign',1,'p_var_and_assign','lex_yacc.py',577),
  ('return_expr -> RETURN expression','return_expr',2,'p_return_expr','lex_yacc.py',590),
  ('return_expr -> RETURN','return_expr',1,'p_return_expr','lex_yacc.py',591),
  ('function_app -> PRINTF LPAREN STRING print_formats RPAREN','function_app',5,'p_function_app','lex_yacc.py',598),
  ('function_app -> ID LPAREN arguments RPAREN','function_app',4,'p_function_app','lex_yacc.py',599),
  ('print_formats -> COMMA expression print_formats','print_formats',3,'p_print_formats','lex_yacc.py',618),
  ('print_formats -> empty','print_formats',1,'p_print_formats','lex_yacc.py',619),
  ('arguments -> expression COMMA arguments','arguments',3,'p_arguments','lex_yacc.py',635),
  ('arguments -> expression','arguments',1,'p_arguments','lex_yacc.py',636),
  ('arguments -> empty','arguments',1,'p_arguments','lex_yacc.py',637),
  ('empty -> <empty>','empty',0,'p_empty','lex_yacc.py',653),
  ('expression -> expression PLUS expression','expression',3,'p_expression','lex_yacc.py',663),
  ('expression -> expression MINUS expression','expression',3,'p_expression','lex_yacc.py',664),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','lex_yacc.py',665),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','lex_yacc.py',666),
  ('expression -> expression LESS expression','expression',3,'p_expression','lex_yacc.py',667),
  ('expression -> expression GREATER expression','expression',3,'p_expression','lex_yacc.py',668),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','lex_yacc.py',669),
  ('expression -> MINUS expression','expression',2,'p_expression','lex_yacc.py',670),
  ('expression -> PTR_AMP expression','expression',2,'p_expression','lex_yacc.py',671),
  ('expression -> id_ptr_or_array DOUBLEPLUS','expression',2,'p_expression','lex_yacc.py',672),
  ('expression -> DOUBLEPLUS id_ptr_or_array','expression',2,'p_expression','lex_yacc.py',673),
  ('expression -> id_ptr_or_array','expression',1,'p_expression','lex_yacc.py',674),
  ('expression -> function_app','expression',1,'p_expression','lex_yacc.py',675),
  ('expression -> var_assignment','expression',1,'p_expression','lex_yacc.py',676),
  ('expression -> INT_VAL','expression',1,'p_expression','lex_yacc.py',677),
  ('expression -> FLOAT_VAL','expression',1,'p_expression','lex_yacc.py',678),
]
