
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLESSGREATERleftPLUSMINUSleftMULTIPLYDIVIDECOMMA DIVIDE DOUBLEPLUS ELSE EQ FLOAT FLOAT_VAL FOR GREATER ID IF INT INT_VAL LBRACE LESS LPAREN MINUS MULTIPLY PLUS PRINTF PTR_AMP RBRACE RETURN RPAREN SEMI SQ_LBRACKET SQ_RBRACKET STRING VOID WHILEprogram : function program\n\t\t\t   | functionfunction : type id variable_declaration blocktype : INT\n\t\t\t| FLOATid : IDvariable_declaration : LPAREN declarations RPARENdeclarations : type id_ptr_or_array COMMA declarations\n\t\t\t\t\t| type id_ptr_or_array\n\t\t\t\t\t| VOIDid_ptr_or_array : id\n\t\t\t\t\t   | id array_decs\n\t\t\t\t\t   | ptrs idarray_decs : SQ_LBRACKET expression SQ_RBRACKET array_decs\n\t\t\t\t  | SQ_LBRACKET expression SQ_RBRACKETptrs : MULTIPLY ptrs\n\t\t    | MULTIPLYblock : LBRACE statements RBRACEstatements : semi_statement\n\t\t\t\t  | non_semi_statement\n\t\t\t      | semi_statement SEMI statements\n\t\t\t      | non_semi_statement statements\n\t\t\t      | emptysemi_statement : var_declaration\n\t\t\t\t\t  | var_assignment\n\t\t\t\t\t  | function_app\n\t\t\t\t\t  | expression\n\t\t\t\t\t  | return_exprnon_semi_statement : conditional\n\t\t\t\t\t\t  | for\n\t\t\t\t\t\t  | whileconditional : if elif_elseif : IF LPAREN expression RPAREN blockelif_else : elif elseelif : ELSE IF LPAREN expression RPAREN block elif\n\t\t\t| emptyelse : ELSE block\n\t\t\t| emptyfor : FOR LPAREN loop_init_or_empty SEMI semi_statement_or_empty SEMI semi_statement_or_empty RPAREN blockloop_init_or_empty : loop_init\n\t\t\t\t\t\t  | expression\n\t\t\t\t\t\t  | emptysemi_statement_or_empty : semi_statement\n\t\t\t\t\t\t\t   | expression\n\t\t\t\t\t\t       | emptyloop_init : type var_assignment\n\t\t\t\t | semi_statementwhile : WHILE LPAREN expression RPAREN blockvar_declaration : type var_and_assignvar_assignment : id_ptr_or_array EQ expression\n\t\t\t\t\t  | id_ptr_or_array EQ function_appvar_and_assign : var_assignment COMMA var_and_assign\n\t\t\t\t\t  | var_assignment\n\t\t\t\t\t  | id_ptr_or_array COMMA var_and_assign\n\t\t\t\t\t  | id_ptr_or_arrayreturn_expr : RETURN expression\n\t\t\t\t   | RETURNfunction_app : PRINTF LPAREN STRING print_formats RPAREN\n\t\t\t\t\t| ID LPAREN arguments RPARENprint_formats : COMMA expression print_formats\n\t\t\t\t\t | expression\n\t\t\t\t\t | emptyarguments : expression COMMA arguments\n\t\t\t\t | expression\n\t\t\t\t | emptyempty :expression : expression PLUS expression\n\t\t\t\t  | expression MINUS expression\n\t\t\t \t  | expression MULTIPLY expression\n\t\t\t  \t  | expression DIVIDE expression\n\t\t\t  \t  | expression LESS expression\n\t\t\t  \t  | expression GREATER expression\n\t\t  \t\t  | LPAREN expression RPAREN\n\t\t  \t\t  | MINUS expression\n\t\t  \t\t  | id_ptr_or_array DOUBLEPLUS\n\t\t  \t\t  | DOUBLEPLUS id_ptr_or_array\n\t\t  \t\t  | id_ptr_or_array\n\t\t  \t\t  | function_app\n\t\t  \t\t  | var_assignment\n\t\t\t  \t  | INT_VAL\n\t\t\t  \t  | FLOAT_VAL'
    
_lr_action_items = {'INT':([0,2,10,11,12,18,25,26,27,39,47,48,71,72,74,75,81,98,100,122,124,138,140,145,148,150,152,],[4,4,4,-3,4,4,-29,-30,-31,-66,-18,4,-32,-66,-36,4,4,-34,-38,-37,4,-48,-33,4,-66,-35,-39,]),'FLOAT':([0,2,10,11,12,18,25,26,27,39,47,48,71,72,74,75,81,98,100,122,124,138,140,145,148,150,152,],[5,5,5,-3,5,5,-29,-30,-31,-66,-18,5,-32,-66,-36,5,5,-34,-38,-37,5,-48,-33,5,-66,-35,-39,]),'$end':([1,2,6,11,47,],[0,-2,-1,-3,-18,]),'ID':([3,4,5,8,12,14,18,25,26,27,28,31,32,33,34,35,36,37,38,39,42,43,47,48,50,51,52,53,54,55,59,60,63,64,65,66,67,68,69,71,72,74,75,76,77,78,79,80,83,84,85,86,87,88,89,90,91,92,93,94,98,100,106,117,120,121,122,123,124,128,130,131,138,139,140,142,143,145,146,147,148,150,152,],[8,-4,-5,-6,32,8,32,-29,-30,-31,8,32,-6,32,-17,8,-80,-81,32,-66,-11,8,-18,32,32,32,32,32,32,32,32,-75,-77,-78,-79,32,-74,-16,-76,-32,-66,-36,32,32,-12,32,-13,32,-67,-68,-69,-70,-71,-72,8,8,-50,-51,32,-73,-34,-38,8,32,-59,32,-37,32,32,-15,-58,32,-48,-14,-33,32,-17,32,-68,-16,-66,-35,-39,]),'MULTIPLY':([4,5,8,12,14,18,21,22,23,25,26,27,28,29,31,32,33,34,35,36,37,38,39,42,47,48,50,51,52,53,54,55,59,60,62,63,64,65,66,67,69,70,71,72,74,75,76,77,78,79,80,83,84,85,86,87,88,89,90,91,92,93,94,96,98,100,104,106,107,109,110,111,112,117,118,120,121,122,123,124,128,130,131,133,136,138,139,140,142,143,145,146,148,150,152,],[-4,-5,-6,34,34,34,-79,-78,52,-29,-30,-31,34,-77,34,-6,34,34,34,-80,-81,34,-66,-11,-18,34,34,34,34,34,34,34,34,-75,52,-77,-78,-79,34,52,-76,52,-32,-66,-36,34,34,-12,34,-13,34,52,52,-69,-70,52,52,34,34,52,-51,34,-73,52,-34,-38,52,34,-79,-78,52,52,52,34,52,-59,34,-37,34,34,-15,-58,143,52,52,-48,-14,-33,34,34,34,52,-66,-35,-39,]),'LPAREN':([7,8,12,18,25,26,27,30,31,32,33,36,37,38,39,40,41,42,44,47,48,50,51,52,53,54,55,59,60,63,64,65,66,67,69,71,72,74,75,76,77,78,79,80,83,84,85,86,87,88,91,92,93,94,98,100,101,117,120,121,122,123,124,128,130,131,138,139,140,142,143,145,146,148,150,152,],[10,-6,31,31,-29,-30,-31,61,31,66,31,-80,-81,31,-66,75,76,-11,80,-18,31,31,31,31,31,31,31,31,-75,-77,-78,-79,31,-74,-76,-32,-66,-36,31,31,-12,31,-13,31,-67,-68,-69,-70,-71,-72,-50,-51,31,-73,-34,-38,123,31,-59,31,-37,31,31,-15,-58,31,-48,-14,-33,31,31,31,-68,-66,-35,-39,]),'SQ_LBRACKET':([8,32,42,128,],[-6,-6,78,78,]),'COMMA':([8,32,36,37,42,46,57,58,60,63,64,65,67,69,77,79,83,84,85,86,87,88,91,92,93,94,96,120,125,126,128,130,131,139,146,],[-6,-6,-80,-81,-11,81,89,90,-75,-77,-78,-79,-74,-76,-12,-13,-67,-68,-69,-70,-71,-72,-50,-51,117,-73,121,-59,89,90,-15,-58,117,-14,-68,]),'RPAREN':([8,13,15,20,21,22,24,32,36,37,38,42,46,56,57,58,60,62,63,64,65,66,67,69,70,77,79,83,84,85,86,87,88,91,92,93,94,95,96,97,110,112,113,114,115,116,118,119,120,121,128,130,131,132,133,135,136,137,139,141,145,146,149,],[-6,45,-10,-24,-25,-26,-28,-6,-80,-81,-57,-11,-9,-49,-53,-55,-75,94,-77,-78,-79,-66,-74,-76,-56,-12,-13,-67,-68,-69,-70,-71,-72,-50,-51,-66,-73,120,-64,-65,127,129,-8,-52,-54,130,-61,-62,-59,-66,-15,-58,-66,-63,144,-43,-27,-45,-14,-60,-66,-68,151,]),'EQ':([8,29,32,42,58,63,77,79,126,128,139,],[-6,59,-6,-11,59,59,-12,-13,59,-15,-14,]),'SEMI':([8,17,20,21,22,23,24,29,32,36,37,38,42,56,57,58,60,63,64,65,67,69,70,75,77,79,83,84,85,86,87,88,91,92,94,102,103,104,105,107,108,109,114,115,120,124,125,126,128,130,134,135,136,137,139,],[-6,48,-24,-25,-26,-27,-28,-77,-6,-80,-81,-57,-11,-49,-53,-55,-75,-77,-78,-79,-74,-76,-56,-66,-12,-13,-67,-68,-69,-70,-71,-72,-50,-51,-73,124,-40,-27,-42,-25,-47,-26,-52,-54,-59,-66,-46,-55,-15,-58,145,-43,-27,-45,-14,]),'RBRACE':([8,12,16,17,18,19,20,21,22,23,24,25,26,27,29,32,36,37,38,39,42,47,48,49,56,57,58,60,63,64,65,67,69,70,71,72,74,77,79,82,83,84,85,86,87,88,91,92,94,98,100,114,115,120,122,128,130,138,139,140,148,150,152,],[-6,-66,47,-19,-20,-23,-24,-25,-26,-27,-28,-29,-30,-31,-77,-6,-80,-81,-57,-66,-11,-18,-66,-22,-49,-53,-55,-75,-77,-78,-79,-74,-76,-56,-32,-66,-36,-12,-13,-21,-67,-68,-69,-70,-71,-72,-50,-51,-73,-34,-38,-52,-54,-59,-37,-15,-58,-48,-14,-33,-66,-35,-39,]),'PLUS':([8,21,22,23,29,32,36,37,42,60,62,63,64,65,67,69,70,77,79,83,84,85,86,87,88,91,92,94,96,104,107,109,110,111,112,118,120,128,130,131,133,136,139,146,],[-6,-79,-78,50,-77,-6,-80,-81,-11,-75,50,-77,-78,-79,-74,-76,50,-12,-13,-67,-68,-69,-70,50,50,50,-51,-73,50,50,-79,-78,50,50,50,50,-59,-15,-58,50,50,50,-14,-68,]),'MINUS':([8,12,18,21,22,23,25,26,27,29,31,32,33,36,37,38,39,42,47,48,50,51,52,53,54,55,59,60,62,63,64,65,66,67,69,70,71,72,74,75,76,77,78,79,80,83,84,85,86,87,88,91,92,93,94,96,98,100,104,107,109,110,111,112,117,118,120,121,122,123,124,128,130,131,133,136,138,139,140,142,143,145,146,148,150,152,],[-6,33,33,-79,-78,51,-29,-30,-31,-77,33,-6,33,-80,-81,33,-66,-11,-18,33,33,33,33,33,33,33,33,-75,51,-77,-78,-79,33,-74,-76,51,-32,-66,-36,33,33,-12,33,-13,33,-67,-68,-69,-70,51,51,51,-51,33,-73,51,-34,-38,51,-79,-78,51,51,51,33,51,-59,33,-37,33,33,-15,-58,142,51,51,-48,-14,-33,33,33,33,-68,-66,-35,-39,]),'DIVIDE':([8,21,22,23,29,32,36,37,42,60,62,63,64,65,67,69,70,77,79,83,84,85,86,87,88,91,92,94,96,104,107,109,110,111,112,118,120,128,130,131,133,136,139,146,],[-6,-79,-78,53,-77,-6,-80,-81,-11,-75,53,-77,-78,-79,53,-76,53,-12,-13,53,53,-69,-70,53,53,53,-51,-73,53,53,-79,-78,53,53,53,53,-59,-15,-58,53,53,53,-14,53,]),'LESS':([8,21,22,23,29,32,36,37,42,60,62,63,64,65,67,69,70,77,79,83,84,85,86,87,88,91,92,94,96,104,107,109,110,111,112,118,120,128,130,131,133,136,139,146,],[-6,-79,-78,54,-77,-6,-80,-81,-11,-75,54,-77,-78,-79,-74,-76,54,-12,-13,-67,-68,-69,-70,-71,-72,54,-51,-73,54,54,-79,-78,54,54,54,54,-59,-15,-58,54,54,54,-14,-68,]),'GREATER':([8,21,22,23,29,32,36,37,42,60,62,63,64,65,67,69,70,77,79,83,84,85,86,87,88,91,92,94,96,104,107,109,110,111,112,118,120,128,130,131,133,136,139,146,],[-6,-79,-78,55,-77,-6,-80,-81,-11,-75,55,-77,-78,-79,-74,-76,55,-12,-13,-67,-68,-69,-70,-71,-72,55,-51,-73,55,55,-79,-78,55,55,55,55,-59,-15,-58,55,55,55,-14,-68,]),'SQ_RBRACKET':([8,32,36,37,42,60,63,64,65,67,69,77,79,83,84,85,86,87,88,91,92,94,111,120,128,130,139,],[-6,-6,-80,-81,-11,-75,-77,-78,-79,-74,-76,-12,-13,-67,-68,-69,-70,-71,-72,-50,-51,-73,128,-59,-15,-58,-14,]),'DOUBLEPLUS':([8,12,18,25,26,27,29,31,32,33,36,37,38,39,42,47,48,50,51,52,53,54,55,59,60,63,64,65,66,67,69,71,72,74,75,76,77,78,79,80,83,84,85,86,87,88,91,92,93,94,98,100,117,120,121,122,123,124,128,130,131,138,139,140,142,143,145,146,148,150,152,],[-6,35,35,-29,-30,-31,60,35,-6,35,-80,-81,35,-66,-11,-18,35,35,35,35,35,35,35,35,-75,60,-78,-79,35,-74,-76,-32,-66,-36,35,35,-12,35,-13,35,-67,-68,-69,-70,-71,-72,-50,-51,35,-73,-34,-38,35,-59,35,-37,35,35,-15,-58,35,-48,-14,-33,35,35,35,-68,-66,-35,-39,]),'INT_VAL':([8,12,18,25,26,27,31,32,33,36,37,38,39,42,47,48,50,51,52,53,54,55,59,60,63,64,65,66,67,69,71,72,74,75,76,77,78,79,80,83,84,85,86,87,88,91,92,93,94,98,100,117,120,121,122,123,124,128,130,131,138,139,140,142,143,145,146,148,150,152,],[-6,36,36,-29,-30,-31,36,-6,36,-80,-81,36,-66,-11,-18,36,36,36,36,36,36,36,36,-75,-77,-78,-79,36,-74,-76,-32,-66,-36,36,36,-12,36,-13,36,-67,-68,-69,-70,-71,-72,-50,-51,36,-73,-34,-38,36,-59,36,-37,36,36,-15,-58,36,-48,-14,-33,36,36,36,-68,-66,-35,-39,]),'FLOAT_VAL':([8,12,18,25,26,27,31,32,33,36,37,38,39,42,47,48,50,51,52,53,54,55,59,60,63,64,65,66,67,69,71,72,74,75,76,77,78,79,80,83,84,85,86,87,88,91,92,93,94,98,100,117,120,121,122,123,124,128,130,131,138,139,140,142,143,145,146,148,150,152,],[-6,37,37,-29,-30,-31,37,-6,37,-80,-81,37,-66,-11,-18,37,37,37,37,37,37,37,37,-75,-77,-78,-79,37,-74,-76,-32,-66,-36,37,37,-12,37,-13,37,-67,-68,-69,-70,-71,-72,-50,-51,37,-73,-34,-38,37,-59,37,-37,37,37,-15,-58,37,-48,-14,-33,37,37,37,-68,-66,-35,-39,]),'PRINTF':([8,12,18,25,26,27,31,32,33,36,37,38,39,42,47,48,50,51,52,53,54,55,59,60,63,64,65,66,67,69,71,72,74,75,76,77,78,79,80,83,84,85,86,87,88,91,92,93,94,98,100,117,120,121,122,123,124,128,130,131,138,139,140,142,143,145,146,148,150,152,],[-6,30,30,-29,-30,-31,30,-6,30,-80,-81,30,-66,-11,-18,30,30,30,30,30,30,30,30,-75,-77,-78,-79,30,-74,-76,-32,-66,-36,30,30,-12,30,-13,30,-67,-68,-69,-70,-71,-72,-50,-51,30,-73,-34,-38,30,-59,30,-37,30,30,-15,-58,30,-48,-14,-33,30,30,30,-68,-66,-35,-39,]),'LBRACE':([9,45,99,127,129,144,151,],[12,-7,12,12,12,12,12,]),'VOID':([10,81,],[15,15,]),'RETURN':([12,18,25,26,27,39,47,48,71,72,74,75,98,100,122,124,138,140,145,148,150,152,],[38,38,-29,-30,-31,-66,-18,38,-32,-66,-36,38,-34,-38,-37,38,-48,-33,38,-66,-35,-39,]),'FOR':([12,18,25,26,27,39,47,48,71,72,74,98,100,122,138,140,148,150,152,],[40,40,-29,-30,-31,-66,-18,40,-32,-66,-36,-34,-38,-37,-48,-33,-66,-35,-39,]),'WHILE':([12,18,25,26,27,39,47,48,71,72,74,98,100,122,138,140,148,150,152,],[41,41,-29,-30,-31,-66,-18,41,-32,-66,-36,-34,-38,-37,-48,-33,-66,-35,-39,]),'IF':([12,18,25,26,27,39,47,48,71,72,73,74,98,100,122,138,140,148,150,152,],[44,44,-29,-30,-31,-66,-18,44,-32,-66,101,-36,-34,-38,-37,-48,-33,-66,-35,-39,]),'ELSE':([39,47,72,74,140,148,150,],[73,-18,99,-36,-33,73,-35,]),'STRING':([61,],[93,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,6,]),'function':([0,2,],[2,2,]),'type':([0,2,10,12,18,48,75,81,124,145,],[3,3,14,28,28,28,106,14,28,28,]),'id':([3,12,14,18,28,31,33,35,38,43,48,50,51,52,53,54,55,59,66,75,76,78,80,89,90,93,106,117,121,123,124,131,142,143,145,147,],[7,42,42,42,42,42,42,42,42,79,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,79,]),'variable_declaration':([7,],[9,]),'block':([9,99,127,129,144,151,],[11,122,138,140,148,152,]),'declarations':([10,81,],[13,113,]),'statements':([12,18,48,],[16,49,82,]),'semi_statement':([12,18,48,75,124,145,],[17,17,17,108,135,135,]),'non_semi_statement':([12,18,48,],[18,18,18,]),'empty':([12,18,39,48,66,72,75,93,121,124,131,145,148,],[19,19,74,19,97,100,105,119,97,137,119,137,74,]),'var_declaration':([12,18,48,75,124,145,],[20,20,20,20,20,20,]),'var_assignment':([12,18,28,31,33,38,48,50,51,52,53,54,55,59,66,75,76,78,80,89,90,93,106,117,121,123,124,131,142,143,145,],[21,21,57,65,65,65,21,65,65,65,65,65,65,65,65,107,65,65,65,57,57,65,125,65,65,65,21,65,65,65,21,]),'function_app':([12,18,31,33,38,48,50,51,52,53,54,55,59,66,75,76,78,80,93,117,121,123,124,131,142,143,145,],[22,22,64,64,64,22,64,64,64,64,64,64,92,64,109,64,64,64,64,64,64,64,22,64,64,64,22,]),'expression':([12,18,31,33,38,48,50,51,52,53,54,55,59,66,75,76,78,80,93,117,121,123,124,131,142,143,145,],[23,23,62,67,70,23,83,84,85,86,87,88,91,96,104,110,111,112,118,131,96,133,136,118,146,85,136,]),'return_expr':([12,18,48,75,124,145,],[24,24,24,24,24,24,]),'conditional':([12,18,48,],[25,25,25,]),'for':([12,18,48,],[26,26,26,]),'while':([12,18,48,],[27,27,27,]),'id_ptr_or_array':([12,14,18,28,31,33,35,38,48,50,51,52,53,54,55,59,66,75,76,78,80,89,90,93,106,117,121,123,124,131,142,143,145,],[29,46,29,58,63,63,69,63,29,63,63,63,63,63,63,63,63,63,63,63,63,58,58,63,126,63,63,63,63,63,63,63,63,]),'if':([12,18,48,],[39,39,39,]),'ptrs':([12,14,18,28,31,33,34,35,38,48,50,51,52,53,54,55,59,66,75,76,78,80,89,90,93,106,117,121,123,124,131,142,143,145,],[43,43,43,43,43,43,68,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,147,43,]),'var_and_assign':([28,89,90,106,],[56,114,115,56,]),'elif_else':([39,],[71,]),'elif':([39,148,],[72,150,]),'array_decs':([42,128,],[77,139,]),'arguments':([66,121,],[95,132,]),'else':([72,],[98,]),'loop_init_or_empty':([75,],[102,]),'loop_init':([75,],[103,]),'print_formats':([93,131,],[116,141,]),'semi_statement_or_empty':([124,145,],[134,149,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function program','program',2,'p_program','lex_yacc.py',181),
  ('program -> function','program',1,'p_program','lex_yacc.py',182),
  ('function -> type id variable_declaration block','function',4,'p_function','lex_yacc.py',195),
  ('type -> INT','type',1,'p_type','lex_yacc.py',205),
  ('type -> FLOAT','type',1,'p_type','lex_yacc.py',206),
  ('id -> ID','id',1,'p_id','lex_yacc.py',216),
  ('variable_declaration -> LPAREN declarations RPAREN','variable_declaration',3,'p_varaible_declaration','lex_yacc.py',226),
  ('declarations -> type id_ptr_or_array COMMA declarations','declarations',4,'p_declarations','lex_yacc.py',236),
  ('declarations -> type id_ptr_or_array','declarations',2,'p_declarations','lex_yacc.py',237),
  ('declarations -> VOID','declarations',1,'p_declarations','lex_yacc.py',238),
  ('id_ptr_or_array -> id','id_ptr_or_array',1,'p_id_ptr_or_array','lex_yacc.py',263),
  ('id_ptr_or_array -> id array_decs','id_ptr_or_array',2,'p_id_ptr_or_array','lex_yacc.py',264),
  ('id_ptr_or_array -> ptrs id','id_ptr_or_array',2,'p_id_ptr_or_array','lex_yacc.py',265),
  ('array_decs -> SQ_LBRACKET expression SQ_RBRACKET array_decs','array_decs',4,'p_array_decs','lex_yacc.py',278),
  ('array_decs -> SQ_LBRACKET expression SQ_RBRACKET','array_decs',3,'p_array_decs','lex_yacc.py',279),
  ('ptrs -> MULTIPLY ptrs','ptrs',2,'p_ptrs','lex_yacc.py',289),
  ('ptrs -> MULTIPLY','ptrs',1,'p_ptrs','lex_yacc.py',290),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','lex_yacc.py',300),
  ('statements -> semi_statement','statements',1,'p_statements','lex_yacc.py',310),
  ('statements -> non_semi_statement','statements',1,'p_statements','lex_yacc.py',311),
  ('statements -> semi_statement SEMI statements','statements',3,'p_statements','lex_yacc.py',312),
  ('statements -> non_semi_statement statements','statements',2,'p_statements','lex_yacc.py',313),
  ('statements -> empty','statements',1,'p_statements','lex_yacc.py',314),
  ('semi_statement -> var_declaration','semi_statement',1,'p_semi_statement','lex_yacc.py',338),
  ('semi_statement -> var_assignment','semi_statement',1,'p_semi_statement','lex_yacc.py',339),
  ('semi_statement -> function_app','semi_statement',1,'p_semi_statement','lex_yacc.py',340),
  ('semi_statement -> expression','semi_statement',1,'p_semi_statement','lex_yacc.py',341),
  ('semi_statement -> return_expr','semi_statement',1,'p_semi_statement','lex_yacc.py',342),
  ('non_semi_statement -> conditional','non_semi_statement',1,'p_non_semi_statement','lex_yacc.py',352),
  ('non_semi_statement -> for','non_semi_statement',1,'p_non_semi_statement','lex_yacc.py',353),
  ('non_semi_statement -> while','non_semi_statement',1,'p_non_semi_statement','lex_yacc.py',354),
  ('conditional -> if elif_else','conditional',2,'p_conditional','lex_yacc.py',364),
  ('if -> IF LPAREN expression RPAREN block','if',5,'p_if','lex_yacc.py',376),
  ('elif_else -> elif else','elif_else',2,'p_elif_else','lex_yacc.py',385),
  ('elif -> ELSE IF LPAREN expression RPAREN block elif','elif',7,'p_elif','lex_yacc.py',403),
  ('elif -> empty','elif',1,'p_elif','lex_yacc.py',404),
  ('else -> ELSE block','else',2,'p_else','lex_yacc.py',420),
  ('else -> empty','else',1,'p_else','lex_yacc.py',421),
  ('for -> FOR LPAREN loop_init_or_empty SEMI semi_statement_or_empty SEMI semi_statement_or_empty RPAREN block','for',9,'p_for','lex_yacc.py',435),
  ('loop_init_or_empty -> loop_init','loop_init_or_empty',1,'p_loop_init_or_empty','lex_yacc.py',445),
  ('loop_init_or_empty -> expression','loop_init_or_empty',1,'p_loop_init_or_empty','lex_yacc.py',446),
  ('loop_init_or_empty -> empty','loop_init_or_empty',1,'p_loop_init_or_empty','lex_yacc.py',447),
  ('semi_statement_or_empty -> semi_statement','semi_statement_or_empty',1,'p_semi_statement_or_empty','lex_yacc.py',457),
  ('semi_statement_or_empty -> expression','semi_statement_or_empty',1,'p_semi_statement_or_empty','lex_yacc.py',458),
  ('semi_statement_or_empty -> empty','semi_statement_or_empty',1,'p_semi_statement_or_empty','lex_yacc.py',459),
  ('loop_init -> type var_assignment','loop_init',2,'p_loop_init','lex_yacc.py',469),
  ('loop_init -> semi_statement','loop_init',1,'p_loop_init','lex_yacc.py',470),
  ('while -> WHILE LPAREN expression RPAREN block','while',5,'p_while','lex_yacc.py',483),
  ('var_declaration -> type var_and_assign','var_declaration',2,'p_var_declaration','lex_yacc.py',493),
  ('var_assignment -> id_ptr_or_array EQ expression','var_assignment',3,'p_var_assignment','lex_yacc.py',533),
  ('var_assignment -> id_ptr_or_array EQ function_app','var_assignment',3,'p_var_assignment','lex_yacc.py',534),
  ('var_and_assign -> var_assignment COMMA var_and_assign','var_and_assign',3,'p_var_and_assign','lex_yacc.py',544),
  ('var_and_assign -> var_assignment','var_and_assign',1,'p_var_and_assign','lex_yacc.py',545),
  ('var_and_assign -> id_ptr_or_array COMMA var_and_assign','var_and_assign',3,'p_var_and_assign','lex_yacc.py',546),
  ('var_and_assign -> id_ptr_or_array','var_and_assign',1,'p_var_and_assign','lex_yacc.py',547),
  ('return_expr -> RETURN expression','return_expr',2,'p_return_expr','lex_yacc.py',560),
  ('return_expr -> RETURN','return_expr',1,'p_return_expr','lex_yacc.py',561),
  ('function_app -> PRINTF LPAREN STRING print_formats RPAREN','function_app',5,'p_function_app','lex_yacc.py',568),
  ('function_app -> ID LPAREN arguments RPAREN','function_app',4,'p_function_app','lex_yacc.py',569),
  ('print_formats -> COMMA expression print_formats','print_formats',3,'p_print_formats','lex_yacc.py',582),
  ('print_formats -> expression','print_formats',1,'p_print_formats','lex_yacc.py',583),
  ('print_formats -> empty','print_formats',1,'p_print_formats','lex_yacc.py',584),
  ('arguments -> expression COMMA arguments','arguments',3,'p_arguments','lex_yacc.py',603),
  ('arguments -> expression','arguments',1,'p_arguments','lex_yacc.py',604),
  ('arguments -> empty','arguments',1,'p_arguments','lex_yacc.py',605),
  ('empty -> <empty>','empty',0,'p_empty','lex_yacc.py',621),
  ('expression -> expression PLUS expression','expression',3,'p_expression','lex_yacc.py',631),
  ('expression -> expression MINUS expression','expression',3,'p_expression','lex_yacc.py',632),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','lex_yacc.py',633),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','lex_yacc.py',634),
  ('expression -> expression LESS expression','expression',3,'p_expression','lex_yacc.py',635),
  ('expression -> expression GREATER expression','expression',3,'p_expression','lex_yacc.py',636),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','lex_yacc.py',637),
  ('expression -> MINUS expression','expression',2,'p_expression','lex_yacc.py',638),
  ('expression -> id_ptr_or_array DOUBLEPLUS','expression',2,'p_expression','lex_yacc.py',639),
  ('expression -> DOUBLEPLUS id_ptr_or_array','expression',2,'p_expression','lex_yacc.py',640),
  ('expression -> id_ptr_or_array','expression',1,'p_expression','lex_yacc.py',641),
  ('expression -> function_app','expression',1,'p_expression','lex_yacc.py',642),
  ('expression -> var_assignment','expression',1,'p_expression','lex_yacc.py',643),
  ('expression -> INT_VAL','expression',1,'p_expression','lex_yacc.py',644),
  ('expression -> FLOAT_VAL','expression',1,'p_expression','lex_yacc.py',645),
]
